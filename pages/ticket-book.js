import Head from "next/head";
import styles from "../styles/TicketBook.module.css";
import {
  Box,
  Button,
  Grid,
  Stack,
  Divider,
  Select,
  MenuItem,
  Paper,
  FormControl,
  FormLabel,
  FormControlLabel,
  Radio,
  RadioGroup,
  TextField,
  Checkbox,
  Link,
} from "@mui/material";

import dynamic from 'next/dynamic'

import { useEffect, useState } from "react";
import { useSelector, useDispatch } from "react-redux";
import { useRouter } from "next/router";
import { checkUserToken } from "../store/actions/userActions";

const BackdropMessage = dynamic(() => import("../components/BackdropMessage"), {
  ssr: false,
});

import GlobalLoading from "../components/Progress/GlobalLoading";
import CustomToolbar from "../components/CustomToolBar/CustomToolBar";

import ArrowBackIosIcon from "@mui/icons-material/ArrowBackIos";
import ArrowForwardIosIcon from "@mui/icons-material/ArrowForwardIos";
import { StaticDatePicker } from "@mui/x-date-pickers/StaticDatePicker";

import { useTheme } from "@mui/material/styles";
import useMediaQuery from "@mui/material/useMediaQuery";
import { globalActions } from "../store/slices/globalSlice";
import Axios from "axios";
import toast from "react-hot-toast";

export default function TicketBook() {
  const dispatch = useDispatch();
  const router = useRouter();

  const loading = useSelector((state) => state.global.loading);
  const userLoggedStatus = useSelector((state) => state.user.userLoggedStatus);

  const initialDate = new Date(new Date().setDate(new Date().getDate() + 1));

  const [ticketCount, setTicketCount] = useState(1);
  const [ticketInfo, setTicketInfo] = useState([]);
  const [ticketDate, setTicketDate] = useState(initialDate);

  const [isError, setIsError] = useState(false);
  const [isSubmit, setIsSubmit] = useState(false);

  const theme = useTheme();
  const mobileView = useMediaQuery(theme.breakpoints.down("md"));

  useEffect(() => {
    if (!userLoggedStatus) {
      checkUserToken(dispatch);
    }
  }, [userLoggedStatus]);

  useEffect(() => {
    console.log("ticketCount", ticketCount);
    let arr = [];
    for (let i = 0; i < ticketCount; i++) {
      arr.push({ name: "", isChild: false, gender: "Male" });
    }
    setTicketInfo([...arr]);
  }, [ticketCount]);

  useEffect(() => {
    let emptyName = true;
    for (let i = 0; i < ticketInfo.length; i++) {
      if (ticketInfo[i].name) {
        setIsError(false);
        emptyName = false;
      } else {
        setIsError(true);
        emptyName = true;
      }
    }
  }, [ticketInfo]);

  const changeTicketData = (e, index, type) => {
    let copy = [...ticketInfo];

    if (type === "age") {
      copy[index].isChild = !copy[index].isChild;
    }
    if (type === "name") {
      copy[index].name = e.target.value;
    }
    if (type === "gender") {
      copy[index].gender = e.target.value;
    }

    setTicketInfo(copy);
  };

  const handleTickets = async () => {
    if (isError) {
      setIsSubmit(true);
    }
    if (!isError) {
      dispatch(globalActions.updateLoading(true));
      setIsSubmit(false);

      if (userLoggedStatus) {
        try {
          let userId = localStorage.getItem("userId");
          let token = localStorage.getItem("token");
          const ticket = await Axios.post("/api/ticket", {
            date: ticketDate.toISOString().split("T")[0],
            info: ticketInfo,
            userId,
            token,
          });
          if (ticket.data) {
            toast.success("Ticket Booked Successfully!");
            dispatch(globalActions.updateLoading(false));
            setTimeout(() => {
              router.replace("/");
            }, 1000);
          }
        } catch (e) {
          console.log(e);
          toast.error("Something went wrong");
          dispatch(globalActions.updateLoading(false));
        }
      }
    }
  };

  return (
    <>
      {loading && <GlobalLoading />}

      <Box>
        <Head>
          <title>SSK || Ticket</title>
          <meta name="description" content="Generated by create next app" />
          <link rel="icon" href="/favicon.ico" />
          <link rel="preconnect" href="https://fonts.googleapis.com" />
          <link rel="preconnect" href="https://fonts.gstatic.com" crossOrigin />
          <link
            href="https://fonts.googleapis.com/css2?family=Lato:ital,wght@0,100;0,300;0,400;0,700;0,900;1,100;1,300;1,400;1,700;1,900&family=Roboto:ital,wght@0,100;0,300;0,400;0,500;0,700;0,900;1,100;1,300;1,400;1,500;1,700;1,900&display=swap"
            rel="stylesheet"
          />
        </Head>
        {!userLoggedStatus && (
          <BackdropMessage />
        )}
        <Grid container>
          <Grid
            item
            container
            sx={{ backgroundColor: "#DE7C01", color: "#fff" }}
            justifyContent="center"
            xs={12}
          >
            <Grid item xs={8} p={1}>
              <Box>
                <Button
                  className={styles.homeBtn}
                  variant="outlined"
                  startIcon={<ArrowBackIosIcon />}
                  onClick={() => router.replace("/")}
                >
                  {"Home"}
                </Button>
              </Box>
            </Grid>
            <Grid item xs={4}>
              <Stack alignItems="flex-end">
                <Box
                  component="img"
                  src="/SSK_LOGO.jpg"
                  sx={
                    mobileView
                      ? { height: "80px", width: "80px" }
                      : { height: "120px", width: "120px" }
                  }
                />
              </Stack>
            </Grid>
            <Grid item xs={11} sm={8} md={9.4} py={2}>
              <Stack>
                <Box>
                  <Box
                    component="h1"
                    className={
                      mobileView ? styles.mobileHeading1 : styles.heading1
                    }
                  >
                    {"Book your tickets"}
                  </Box>
                </Box>
              </Stack>
            </Grid>
          </Grid>

          <Grid item container justifyContent="center" xs={12}>
            <Grid container justifyContent="center" item xs={11} sm={12} md={8}>
              <Grid item xs={12} sm={8} md={8}>
                <Stack>
                  <Box>
                    <Box
                      component="h2"
                      className={
                        mobileView ? styles.mobileHeading2 : styles.heading2
                      }
                    >
                      {"When would you like to visit the Museum?"}
                    </Box>
                  </Box>
                  <Divider className={styles.divider} />
                  <Box
                    sx={{
                      display: "flex",
                      justifyContent: "space-between",
                      alignItems: "center",
                      flexDirection: "row",
                    }}
                  >
                    <Box
                      component="span"
                      sx={
                        mobileView
                          ? { fontSize: "0.9rem", lineHeight: "1.2rem" }
                          : { fontSize: "1rem", lineHeight: "2.5rem" }
                      }
                    >
                      {"How many people are there in your group?"}
                    </Box>
                    <Box sx={{ width: "20%" }}>
                      <Select
                        name="ticket"
                        value={ticketCount}
                        onChange={(e) => setTicketCount(e.target.value)}
                        sx={
                          mobileView
                            ? { width: "100%", borderRadius: "15px", my: 0.5 }
                            : { width: "100%", borderRadius: "30px", my: 0.5 }
                        }
                      >
                        <MenuItem value={1}>1</MenuItem>
                        <MenuItem value={2}>2</MenuItem>
                        <MenuItem value={3}>3</MenuItem>
                        <MenuItem value={4}>4</MenuItem>
                        <MenuItem value={5}>5</MenuItem>
                        <MenuItem value={6}>6</MenuItem>
                      </Select>
                    </Box>
                  </Box>
                  <Divider className={styles.divider} />
                </Stack>
              </Grid>

              <Grid container item xs={12} sm={8} md={8} spacing={2} my={2}>
                {ticketInfo?.map((ticket, index) => (
                  <Grid item xs={12} sm={6} md={6} lg={4} key={`${index}`}>
                    <Paper variant="outlined">
                      <Stack direction="column" padding={2} spacing={2}>
                        <Box>
                          <TextField
                            name="name"
                            value={ticket.name}
                            variant="standard"
                            label="Full Name"
                            onChange={(e) => changeTicketData(e, index, "name")}
                            {...(isSubmit === true && ticket.name === ""
                              ? {
                                  error: true,
                                  helperText: "Name is Required",
                                }
                              : null)}
                          />
                        </Box>
                        <FormControl>
                          <FormLabel>Gender</FormLabel>
                          <RadioGroup
                            row
                            name="gender"
                            value={ticket.gender}
                            onChange={(e) =>
                              changeTicketData(e, index, "gender")
                            }
                          >
                            <FormControlLabel
                              value="Male"
                              control={<Radio />}
                              label="Male"
                            />
                            <FormControlLabel
                              value="Female"
                              control={<Radio />}
                              label="Female"
                            />
                            <FormControlLabel
                              value="Other"
                              control={<Radio />}
                              label="Other"
                            />
                          </RadioGroup>
                        </FormControl>
                        <Box
                          sx={{
                            display: "flex",
                            alignItems: "center",
                            flexDirection: "row",
                            marginLeft: "-10px !important",
                          }}
                        >
                          <Checkbox
                            name="isChild"
                            checked={ticket.isChild}
                            onChange={(e) => changeTicketData(e, index, "age")}
                          />
                          <Box component="span">{"Is Child"}</Box>
                        </Box>
                      </Stack>
                    </Paper>
                  </Grid>
                ))}
              </Grid>
            </Grid>

            <Grid
              item
              xs={12}
              sm={12}
              md={4}
              sx={
                mobileView
                  ? {
                      marginTop: "50px",
                      display: "flex",
                      justifyContent: "center",
                    }
                  : {
                      marginTop: "50px",
                      display: "flex",
                      justifyContent: "flex-start",
                    }
              }
            >
              <StaticDatePicker
                displayStaticWrapperAs="desktop"
                orientation="portrait"
                disableOpenPicker={false}
                disablePast={true}
                // loading={true}
                views={["day"]}
                minDate={new Date(new Date().setDate(new Date().getDate() + 1))}
                maxDate={
                  new Date(new Date().setDate(new Date().getDate() + 30))
                }
                // openTo="day"
                // disableOpenPicker
                value={ticketDate}
                // shouldDisableDate={isWeekend}
                showToolbar={true}
                ToolbarComponent={() => <CustomToolbar text={"Pick a Date"} />}
                onChange={(newValue) => setTicketDate(newValue)}
                renderInput={(params) => <TextField {...params} />}
                className={styles.datePicker}
                disableMargin
              />
            </Grid>

            <Grid item xs={12} p={2} my={2}>
              <Box
                sx={
                  mobileView
                    ? { textAlign: "end", marginRight: "1rem" }
                    : { textAlign: "end", marginRight: "4rem" }
                }
              >
                <Button
                  className={styles.ticketBtn}
                  variant="contained"
                  endIcon={<ArrowForwardIosIcon />}
                  onClick={handleTickets}
                >
                  {"Tickets"}
                </Button>
              </Box>
            </Grid>
          </Grid>
        </Grid>
      </Box>
    </>
  );
}
